/*
 * Copyright (C) 2023  Christopher J. Howard
 *
 * This file is part of Antkeeper source code.
 *
 * Antkeeper source code is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Antkeeper source code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Antkeeper source code.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef ANTKEEPER_INPUT_KEYBOARD_EVENTS_HPP
#define ANTKEEPER_INPUT_KEYBOARD_EVENTS_HPP

#include "input/scancode.hpp"
#include "input/modifier-key.hpp"
#include <cstdint>

namespace input {

class keyboard;

/**
 * Event generated when a keyboard key has been pressed.
 */
struct key_pressed_event
{
	/// Keyboard that generated the event.
	keyboard* keyboard;
	
	/// Scancode of the key being pressed.
	scancode scancode;
	
	/// Bit mask containing the active modifier keys.
	std::uint16_t modifiers;
	
	/// `true` if the key press was generated by a key repeat, `false` otherwise.
	bool repeat;
};

/**
 * Event generated when a keyboard key has been released.
 */
struct key_released_event
{
	/// Keyboard that generated the event.
	keyboard* keyboard;
	
	/// Scancode of the key being released.
	scancode scancode;
	
	/// Bit mask containing the active modifier keys.
	std::uint16_t modifiers;
};

} // namespace input

#endif // ANTKEEPER_INPUT_KEYBOARD_EVENTS_HPP
