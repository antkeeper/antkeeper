/*
 * Copyright (C) 2023  Christopher J. Howard
 *
 * This file is part of Antkeeper source code.
 *
 * Antkeeper source code is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Antkeeper source code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Antkeeper source code.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef ANTKEEPER_INPUT_SCANCODE_HPP
#define ANTKEEPER_INPUT_SCANCODE_HPP

#include <cstdint>

namespace input {

/**
 * Keyboard scancodes.
 *
 * @see HID Usage Tables for Universal Serial Bus (USB) version 1.3, 2022, https://usb.org/sites/default/files/hut1_3_0.pdf.
 */
enum class scancode: std::uint16_t
{
	// reserved            = 0x00,
	error_roll_over        = 0x01,
	post_fail              = 0x02,
	error_undefined        = 0x03,
	a                      = 0x04,
	b                      = 0x05,
	c                      = 0x06,
	d                      = 0x07,
	e                      = 0x08,
	f                      = 0x09,
	g                      = 0x0A,
	h                      = 0x0B,
	i                      = 0x0C,
	j                      = 0x0D,
	k                      = 0x0E,
	l                      = 0x0F,
	m                      = 0x10,
	n                      = 0x11,
	o                      = 0x12,
	p                      = 0x13,
	q                      = 0x14,
	r                      = 0x15,
	s                      = 0x16,
	t                      = 0x17,
	u                      = 0x18,
	v                      = 0x19,
	w                      = 0x1A,
	x                      = 0x1B,
	y                      = 0x1C,
	z                      = 0x1D,
	digit_1                = 0x1E,
	digit_2                = 0x1F,
	digit_3                = 0x20,
	digit_4                = 0x21,
	digit_5                = 0x22,
	digit_6                = 0x23,
	digit_7                = 0x24,
	digit_8                = 0x25,
	digit_9                = 0x26,
	digit_0                = 0x27,
	enter                  = 0x28,
	escape                 = 0x29,
	backspace              = 0x2A,
	tab                    = 0x2B,
	space                  = 0x2C,
	minus                  = 0x2D,
	equal                  = 0x2E,
	left_brace             = 0x2F,
	right_brace            = 0x30,
	backslash              = 0x31,
	non_us_hash            = 0x32,
	semicolon              = 0x33,
	apostrophe             = 0x34,
	grave                  = 0x35,
	comma                  = 0x36,
	dot                    = 0x37,
	slash                  = 0x38,
	caps_lock              = 0x39,
	f1                     = 0x3A,
	f2                     = 0x3B,
	f3                     = 0x3C,
	f4                     = 0x3D,
	f5                     = 0x3E,
	f6                     = 0x3F,
	f7                     = 0x40,
	f8                     = 0x41,
	f9                     = 0x42,
	f10                    = 0x43,
	f11                    = 0x44,
	f12                    = 0x45,
	print_screen           = 0x46,
	scroll_lock            = 0x47,
	pause                  = 0x48,
	insert                 = 0x49,
	home                   = 0x4A,
	page_up                = 0x4B,
	del                    = 0x4C,
	end                    = 0x4D,
	page_down              = 0x4E,
	right                  = 0x4F,
	left                   = 0x50,
	down                   = 0x51,
	up                     = 0x52,
	num_lock               = 0x53,
	kp_slash               = 0x54,
	kp_asterisk            = 0x55,
	kp_minus               = 0x56,
	kp_plus                = 0x57,
	kp_enter               = 0x58,
	kp_1                   = 0x59,
	kp_2                   = 0x5A,
	kp_3                   = 0x5B,
	kp_4                   = 0x5C,
	kp_5                   = 0x5D,
	kp_6                   = 0x5E,
	kp_7                   = 0x5F,
	kp_8                   = 0x60,
	kp_9                   = 0x61,
	kp_0                   = 0x62,
	kp_dot                 = 0x63,
	non_us_backslash       = 0x64,
	application            = 0x65,
	power                  = 0x66,
	kp_equal               = 0x67,
	f13                    = 0x68,
	f14                    = 0x69,
	f15                    = 0x6A,
	f16                    = 0x6B,
	f17                    = 0x6C,
	f18                    = 0x6D,
	f19                    = 0x6E,
	f20                    = 0x6F,
	f21                    = 0x70,
	f22                    = 0x71,
	f23                    = 0x72,
	f24                    = 0x73,
	execute                = 0x74,
	help                   = 0x75,
	menu                   = 0x76,
	select                 = 0x77,
	stop                   = 0x78,
	again                  = 0x79,
	undo                   = 0x7A,
	cut                    = 0x7B,
	copy                   = 0x7C,
	paste                  = 0x7D,
	find                   = 0x7E,
	mute                   = 0x7F,
	volume_up              = 0x80,
	volume_down            = 0x81,
	locking_caps_lock      = 0x82,
	locking_num_lock       = 0x83,
	locking_scroll_lock    = 0x84,
	kp_comma               = 0x85,
	kp_equal_as400         = 0x86,
	international_1        = 0x87,
	international_2        = 0x88,
	international_3        = 0x89,
	international_4        = 0x8A,
	international_5        = 0x8B,
	international_6        = 0x8C,
	international_7        = 0x8D,
	international_8        = 0x8E,
	international_9        = 0x8F,
	lang_1                 = 0x90,
	lang_2                 = 0x91,
	lang_3                 = 0x92,
	lang_4                 = 0x93,
	lang_5                 = 0x94,
	lang_6                 = 0x95,
	lang_7                 = 0x96,
	lang_8                 = 0x97,
	lang_9                 = 0x98,
	alt_erase              = 0x99,
	sys_req                = 0x9A,
	cancel                 = 0x9B,
	clear                  = 0x9C,
	prior                  = 0x9D,
	return_2               = 0x9E,
	separator              = 0x9F,
	_out                   = 0xA0,
	oper                   = 0xA1,
	clear_again            = 0xA2,
	cr_sel                 = 0xA3,
	ex_sel                 = 0xA4,
	// reserved            = 0xA5,
	// reserved            = 0xA6,
	// reserved            = 0xA7,
	// reserved            = 0xA8,
	// reserved            = 0xA9,
	// reserved            = 0xAA,
	// reserved            = 0xAB,
	// reserved            = 0xAC,
	// reserved            = 0xAD,
	// reserved            = 0xAE,
	// reserved            = 0xAF,
	kp_00                  = 0xB0,
	kp_000                 = 0xB1,
	thousands_separator    = 0xB2,
	decimal_separator      = 0xB3,
	currency_unit          = 0xB4,
	currency_sub_unit      = 0xB5,
	kp_left_paren          = 0xB6,
	kp_right_paren         = 0xB7,
	kp_left_brace          = 0xB8,
	kp_right_brace         = 0xB9,
	kp_tab                 = 0xBA,
	kp_backspace           = 0xBB,
	kp_a                   = 0xBC,
	kp_b                   = 0xBD,
	kp_c                   = 0xBE,
	kp_d                   = 0xBF,
	kp_e                   = 0xC0,
	kp_f                   = 0xC1,
	kp_xor                 = 0xC2,
	kp_power               = 0xC3,
	kp_percent             = 0xC4,
	kp_less                = 0xC5,
	kp_greater             = 0xC6,
	kp_ampersand           = 0xC7,
	kp_double_ampersand    = 0xC8,
	kp_vertical_bar        = 0xC9,
	kp_double_vertical_bar = 0xCA,
	kp_colon               = 0xCB,
	kp_hash                = 0xCC,
	kp_space               = 0xCD,
	kp_at                  = 0xCE,
	kp_exclam              = 0xCF,
	kp_mem_store           = 0xD0,
	kp_mem_recall          = 0xD1,
	kp_mem_clear           = 0xD2,
	kp_mem_add             = 0xD3,
	kp_mem_subtract        = 0xD4,
	kp_mem_multiply        = 0xD5,
	kp_mem_divide          = 0xD6,
	kp_plus_minus          = 0xD7,
	kp_clear               = 0xD8,
	kp_clear_entry         = 0xD9,
	kp_binary              = 0xDA,
	kp_octal               = 0xDB,
	kp_decimal             = 0xDC,
	kp_hexadecimal         = 0xDD,
	// reserved            = 0xDE,
	// reserved            = 0xDF,
	left_ctrl              = 0xE0,
	left_shift             = 0xE1,
	left_alt               = 0xE2,
	left_gui               = 0xE3,
	right_ctrl             = 0xE4,
	right_shift            = 0xE5,
	right_alt              = 0xE6,
	right_gui              = 0xE7
	// reserved            = 0xE8-0xFFFF
};

} // namespace input

#endif // ANTKEEPER_INPUT_SCANCODE_HPP
